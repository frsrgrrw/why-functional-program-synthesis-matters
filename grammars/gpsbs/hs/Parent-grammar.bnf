<code> ::= <OUTPUT_TYPE_HERE>


<number> ::= <number><num>|<num>
<num> ::= '0'|'1'|'2'|'3'|'4'|'5'|'6'|'7'|'8'|'9'
<char_const> ::= "'problem dependent'"|"'"<char_literal>"'"
<bool_const> ::= 'True'|'False'
<char_literal> ::= ' '|'problem dependent'
<string_builder> ::= <string_builder><char_literal>|<char_literal>
<string_const> ::= '"problem dependent"'|'"'<string_builder>'"'
<int_list_const> ::= 'problem dependent'
<double_list_const> ::= 'problem dependent'
<string_list_const> ::= 'problem dependent'


<bool_var> ::= 'VARIBALE_NAME_HERE'
<int_var> ::= 'VARIBALE_NAME_HERE'
<double_var> ::= 'VARIBALE_NAME_HERE'
<char_var> ::= 'VARIBALE_NAME_HERE'
<string_var> ::= 'VARIBALE_NAME_HERE'
<int_list_var> ::= 'VARIBALE_NAME_HERE'
<double_list_var> ::= 'VARIBALE_NAME_HERE'
<string_list_var> ::= 'VARIBALE_NAME_HERE'


<bool_op> ::= '&&'|'||'
<arith_ops> ::= '+'|'-'|'*'
<int_arith_ops_protected> ::= 'safeIntDiv'|'safeMod'
<double_arith_ops_protected> ::= 'safeDiv'|'safeDoubleMod'
<prefix> ::= ''|'-'
<comp_op> ::= '=='|'/='|'<'|'>'|'>='|'<='

<fold> ::= 'foldr'|'foldl'


<int> ::= <int_value>|<int_expression>
<int_value> ::= <number>|<int_var>

<int_expression> ::= '('<prefix>' '<int>')'
                        |'(abs '<int>')'
                        |'(('<arith_ops>') '<int>' '<int>')'
                        |'('<int_arith_ops_protected>' '<int>' '<int>')'
                        |'(min '<int>' '<int>')'
                        |'(max '<int>' '<int>')'
                        |'(if '<bool>' then '<int>' else '<int>')'
                        |'(ceiling ('<double>'))'
                        |'(floor ('<double>'))'
                        |'(round ('<double>'))'
                        |'(truncate ('<double>'))'
                        |'(safeFromEnumCharInt '<char>')'
                        |'(length '<int_list>')'
                        |'(safeMinimumInts '<int_list>')'
                        |'(safeMaximumInts '<int_list>')'
                        |'(safeHeadInts '<int_list>')'
                        |'(safeLastInts '<int_list>')'
                        |'(sum '<int_list>')'
                        |'('<fold>' ('<arith_ops>') '<int>' '<int_list>')'
                        |'('<fold>' '<int_arith_ops_protected>' '<int>' '<int_list>')'
                        |'(length '<double_list>')'
                        |'(length '<string>')'
                        |'(length '<string_list>')'

<double> ::= <double_value>|<double_expression>
<double_value> ::= <number>'.'<number>|<double_var>
<double_expression> ::= '('<prefix>' '<double>')'
                        |'(abs '<double>')'
                        |'(sin '<double>')'
                        |'(cos '<double>')'
                        |'(tan '<double>')'
                        |'(('<arith_ops>') '<double>' '<double>')'
                        |'('<double_arith_ops_protected>' '<double>' '<double>')'
                        |'(min '<double>' '<double>')'
                        |'(max '<double>' '<double>')'
                        |'(if '<bool>' then '<double>' else '<double>')'
                        |'(fromIntegral ('<int>'))'
                        |'(safeMinimumDoubles '<double_list>')'
                        |'(safeMaximumDoubles '<double_list>')'
                        |'(safeHeadDoubles '<double_list>')'
                        |'(safeLastDoubles '<double_list>')'
                        |'(sum '<double_list>')'
                        |'('<fold>' ('<arith_ops>') '<double>' '<double_list>')'
                        |'('<fold>' '<double_arith_ops_protected>' '<double>' '<double_list>')'

<bool> ::= <bool_value>|<bool_expression>
<bool_value> ::= <bool_const>|<bool_var>
<bool_expression> ::= '(not '<bool>')'|'( '<bool>' '<bool_op>' '<bool>' )'
                        |'(if '<bool>' then '<bool>' else '<bool>')'
                        |'(even '<int>')'|'(odd '<int>')'
                        |'('<int>' '<comp_op>' '<int>')'
                        |'('<double>' '<comp_op>' '<double>')'
                        |'('<string>' '<comp_op>' '<string>')'
                        |'('<char>' '<comp_op>' '<char>')'
                        |'('<int_list>' '<comp_op>' '<int_list>')'
                        |'('<double_list>' '<comp_op>' '<double_list>')'
                        |'('<string_list>' '<comp_op>' '<string_list>')'
                        |'(null '<int_list>')'
                        |'(null '<double_list>')'
                        |'(null '<string>')'
                        |'(null '<string_list>')'
                        |'(all ('<comp_op>' '<double>') '<double_list>')'
                        |'(all ('<comp_op>' '<int>') '<int_list>')'

<char> ::= <char_value>|<char_expression>
<char_value> ::= <char_const>|<char_var>
<char_expression> ::= '(safeHeadChars '<string>')'
                        |'(safeLastChars '<string>')'
                        |'(if '<bool>' then '<char>' else '<char>')'
                        |'(safeToEnumIntChar '<int>')'

<int_list> ::= <int_list_value>|<int_list_expression>
<int_list_value> ::= <int_list_const>|<int_list_var>
<int_list_expression> ::= '(filter ('<comp_op>' '<int>') '<int_list>')'
                        |'(safeReplicate '<int>' '<int>')'
                        |'(zipWith ('<arith_ops>') '<double_list>' '<double_list>')'
                        |'(zipWith '<arith_ops_protected>' '<double_list>' '<double_list>')'
                        |'(map abs '<int_list>')'
                        |'(map ceiling '<double_list>')'
                        |'(map floor '<double_list>')'
                        |'(map round '<double_list>')'
                        |'(map truncate '<double_list>')'
                        |'(if '<bool>' then '<int_list>' else '<int_list>')'
                        |'('<int>':'<int_list>')'
                        |'('<int_list>' ++ '<int_list>')'
                        |'(safeTail '<int_list>')'
                        |'(safeInit '<int_list>')'
                        |'(take '<int>' '<int_list>')'
                        |'(drop '<int>' '<int_list>')'
                  

<double_list> ::= <double_list_value>|<double_list_expression>
<double_list_value> ::= <double_list_const>|<double_list_var>
<double_list_expression> ::= '(filter ('<comp_op>' '<double>') '<double_list>')'
                        |'(safeReplicate '<int>' '<double>')'
                        |'(zipWith ('<arith_ops>') '<double_list>' '<double_list>')'
                        |'(zipWith '<double_arith_ops_protected>' '<double_list>' '<double_list>')'
                        |'(map sin '<double_list>')'
                        |'(map cos '<double_list>')'
                        |'(map tan '<double_list>')'
                        |'(map fromIntegral '<int_list>')'
                        |'(if '<bool>' then '<double_list>' else '<double_list>')'
                        |'('<double>':'<double_list>')'
                        |'('<double_list>' ++ '<double_list>')'
                        |'(safeTail '<double_list>')'
                        |'(safeInit '<double_list>')'
                        |'(take '<int>' '<double_list>')'
                        |'(drop '<int>' '<double_list>')'
                

<string> ::= <string_value>|<string_expression>
<string_value> ::= <string_const>|<string_var>
<string_expression> ::= '('<string>' ++ '<string>')'
                        |'('<char>':'<string>')'
                        |'(filter ('<comp_op>' '<char>') '<string>')'
                        |'(if '<bool>' then '<string>' else '<string>')'
                        |'(safeReplicate '<int>' '<char>')'
                        |'(safeTail '<string>')'
                        |'(safeInit '<string>')'
                        |'(unwords '<string_list>')'
                        |'(unlines '<string_list>')'
                        |'(concat '<string_list>')'
                        |'(safeHeadStrings '<string_list>')'
                        |'(safeLastStrings '<string_list>')'


<string_list> ::= <string_list_value>|<string_list_expression>
<string_list_value> ::= <string_list_const>|<string_list_var>
<string_list_expression> ::= '('<string>':'<string_list>')'
                        |'('<string_list>' ++ '<string_list>')'
                        |'(words '<string>')'
                        |'(if '<bool>' then '<string_list>' else '<string_list>')'
                        |'(lines '<string>')'
                        |'(filter ('<comp_op>' '<string>') '<string_list>')'
                        |'(safeReplicate '<int>' '<string>')'
                        |'(safeTail '<string_list>')'
                        |'(safeInit '<string_list>')'
